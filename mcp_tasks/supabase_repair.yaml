# MCP Supabase Repair Task
# Fully automated schema patching without manual intervention

apiVersion: pulser.mcp/v1
kind: Task
metadata:
  name: supabase-repair
  namespace: scout-databank
  labels:
    app: scout-analytics
    component: database
    criticality: high

spec:
  agent:
    role: supabase.repair
    permissions:
      - database.schema.write
      - database.rls.write
      - database.realtime.write
      - database.data.write

  execution:
    mode: sequential
    timeout: 300s
    retries: 3
    
  guards:
    - name: check-existing-schema
      type: query
      condition: |
        SELECT COUNT(*) as table_count 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('transactions', 'product_mix', 'consumer_behavior')
      continue_if: "table_count < 3"
      
    - name: verify-credentials
      type: connection_test
      required: true

  tasks:
    # Phase 1: Schema Creation
    - id: create-schema
      name: "Create Missing Tables"
      type: sql.execute
      config:
        script: |
          -- Create all required tables with IF NOT EXISTS
          CREATE TABLE IF NOT EXISTS transactions (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            volume DECIMAL(10,2),
            revenue DECIMAL(10,2),
            avg_basket DECIMAL(10,2),
            duration INTEGER,
            units INTEGER,
            location VARCHAR(255),
            category VARCHAR(255),
            brand VARCHAR(255)
          );

          CREATE TABLE IF NOT EXISTS product_mix (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            category VARCHAR(255),
            value DECIMAL(10,2),
            skus INTEGER,
            revenue DECIMAL(10,2)
          );

          CREATE TABLE IF NOT EXISTS consumer_behavior (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            method VARCHAR(255),
            value DECIMAL(10,2),
            suggested INTEGER,
            accepted INTEGER,
            rate DECIMAL(5,2)
          );

          CREATE TABLE IF NOT EXISTS consumer_profiles (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            age_group VARCHAR(50),
            gender VARCHAR(20),
            location VARCHAR(255),
            income_level VARCHAR(50),
            urban_rural VARCHAR(20)
          );

          CREATE TABLE IF NOT EXISTS product_substitutions (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            original_product VARCHAR(255),
            suggested_product VARCHAR(255),
            acceptance_rate DECIMAL(5,2),
            revenue_impact DECIMAL(10,2)
          );

          CREATE TABLE IF NOT EXISTS suggestion_acceptance (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            suggestion_type VARCHAR(100),
            accepted BOOLEAN,
            user_segment VARCHAR(100),
            product_category VARCHAR(100)
          );

          CREATE TABLE IF NOT EXISTS sku_analytics (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            created_at TIMESTAMPTZ DEFAULT now(),
            sku VARCHAR(100),
            product_name VARCHAR(255),
            category VARCHAR(100),
            units_sold INTEGER,
            revenue DECIMAL(10,2),
            stock_level INTEGER
          );

    # Phase 2: RLS Configuration
    - id: configure-rls
      name: "Enable RLS and Create Policies"
      type: sql.execute
      config:
        script: |
          -- Enable RLS on all tables
          DO $$
          DECLARE
            tbl text;
          BEGIN
            FOREACH tbl IN ARRAY ARRAY[
              'transactions', 'product_mix', 'consumer_behavior',
              'consumer_profiles', 'product_substitutions',
              'suggestion_acceptance', 'sku_analytics'
            ] LOOP
              -- Enable RLS
              EXECUTE format('ALTER TABLE %I ENABLE ROW LEVEL SECURITY', tbl);
              
              -- Drop existing policy if exists
              EXECUTE format('DROP POLICY IF EXISTS "Allow anon read access" ON %I', tbl);
              
              -- Create anon read policy
              EXECUTE format($f$
                CREATE POLICY "Allow anon read access" ON %I
                FOR SELECT TO anon USING (true)
              $f$, tbl);
              
              -- Log action
              RAISE NOTICE 'RLS enabled and policy created for table: %', tbl;
            END LOOP;
          END$$;

    # Phase 3: Realtime Configuration
    - id: enable-realtime
      name: "Configure Realtime Subscriptions"
      type: sql.execute
      config:
        script: |
          -- Ensure realtime publication exists
          DO $$
          BEGIN
            IF NOT EXISTS (
              SELECT 1 FROM pg_publication WHERE pubname = 'supabase_realtime'
            ) THEN
              CREATE PUBLICATION supabase_realtime;
            END IF;
          END$$;

          -- Add all tables to realtime (idempotent)
          DO $$
          DECLARE
            tbl text;
          BEGIN
            FOREACH tbl IN ARRAY ARRAY[
              'transactions', 'product_mix', 'consumer_behavior',
              'consumer_profiles', 'product_substitutions',
              'suggestion_acceptance', 'sku_analytics'
            ] LOOP
              -- Check if table already in publication
              IF NOT EXISTS (
                SELECT 1 FROM pg_publication_tables
                WHERE pubname = 'supabase_realtime'
                AND schemaname = 'public'
                AND tablename = tbl
              ) THEN
                EXECUTE format('ALTER PUBLICATION supabase_realtime ADD TABLE %I', tbl);
                RAISE NOTICE 'Added % to realtime publication', tbl;
              ELSE
                RAISE NOTICE 'Table % already in realtime publication', tbl;
              END IF;
            END LOOP;
          END$$;

    # Phase 4: Sample Data (Optional)
    - id: insert-sample-data
      name: "Insert Sample Data"
      type: sql.execute
      condition: "${INSERT_SAMPLE_DATA:-true}"
      config:
        script: |
          -- Insert sample transactions (only if empty)
          INSERT INTO transactions (volume, revenue, avg_basket, duration, units, location, category, brand)
          SELECT 
            (random() * 10000 + 1000)::DECIMAL(10,2),
            (random() * 50000 + 5000)::DECIMAL(10,2),
            (random() * 200 + 50)::DECIMAL(10,2),
            (random() * 120 + 30)::INTEGER,
            (random() * 500 + 50)::INTEGER,
            (ARRAY['New York', 'Los Angeles', 'Chicago', 'Houston'])[floor(random() * 4 + 1)],
            (ARRAY['Electronics', 'Clothing', 'Food & Beverage', 'Home & Garden'])[floor(random() * 4 + 1)],
            (ARRAY['Brand A', 'Brand B', 'Brand C'])[floor(random() * 3 + 1)]
          FROM generate_series(1, 5)
          WHERE NOT EXISTS (SELECT 1 FROM transactions LIMIT 1);

          -- Insert other sample data similarly...
          RAISE NOTICE 'Sample data insertion completed';

    # Phase 5: Verification
    - id: verify-setup
      name: "Verify Configuration"
      type: sql.query
      config:
        query: |
          SELECT 
            t.table_name,
            t.row_security as rls_enabled,
            COUNT(DISTINCT p.policyname) as policy_count,
            EXISTS(
              SELECT 1 FROM pg_publication_tables pt
              WHERE pt.pubname = 'supabase_realtime' 
              AND pt.schemaname = 'public' 
              AND pt.tablename = t.table_name
            ) as realtime_enabled,
            (SELECT COUNT(*) FROM information_schema.columns 
             WHERE table_name = t.table_name AND table_schema = 'public') as column_count
          FROM pg_tables t
          LEFT JOIN pg_policies p ON t.tablename = p.tablename AND t.schemaname = p.schemaname
          WHERE t.schemaname = 'public' 
          AND t.tablename IN (
            'transactions', 'product_mix', 'consumer_behavior', 
            'consumer_profiles', 'product_substitutions', 
            'suggestion_acceptance', 'sku_analytics'
          )
          GROUP BY t.table_name, t.row_security
          ORDER BY t.table_name;
        
        validation:
          all_tables_exist: true
          all_rls_enabled: true
          all_have_policies: true
          all_realtime_enabled: true

  # Audit and Logging
  audit:
    enabled: true
    destination: mcp_logs.supabase_patches
    fields:
      - timestamp
      - task_id
      - status
      - duration_ms
      - error_message
      - affected_tables
      - user_agent
      - patch_version: "1.0.0"
      
  notifications:
    on_success:
      - type: log
        message: "Supabase schema repair completed successfully"
    on_failure:
      - type: webhook
        url: "${MCP_WEBHOOK_URL}"
        payload:
          alert: "Supabase schema repair failed"
          task_id: "${TASK_ID}"
          error: "${ERROR_MESSAGE}"